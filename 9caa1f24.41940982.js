/*! For license information please see 9caa1f24.41940982.js.LICENSE */
(window.webpackJsonp=window.webpackJsonp||[]).push([[35],{138:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return i})),t.d(n,"rightToc",(function(){return s})),t.d(n,"default",(function(){return b}));var a=t(1),r=t(6),o=(t(0),t(170)),l=(t(175),{title:"GoLang",sidebar_label:"golang",description:"Pinot Client for Golang"}),i={id:"user-guide/clients/golang",title:"GoLang",description:"Pinot Client for Golang",source:"@site/docs/user-guide/clients/golang.md",permalink:"/docs/user-guide/clients/golang",editUrl:"https://github.com/apache/incubator-pinot/edit/master/website/docs/user-guide/clients/golang.md",sidebar_label:"golang"},s=[{value:"Examples",id:"examples",children:[]},{value:"Usage",id:"usage",children:[{value:"Create a Pinot Connection",id:"create-a-pinot-connection",children:[]}]},{value:"Query Pinot",id:"query-pinot",children:[]}],c={rightToc:s},u="wrapper";function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(o.b)(u,Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Applications can use this golang client library to query Apache Pinot."),Object(o.b)("p",null,"Source Code Repo: ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/fx19880617/pinot-client-go"}),"https://github.com/fx19880617/pinot-client-go")),Object(o.b)("h2",{id:"examples"},"Examples"),Object(o.b)("p",null,"Please follow this Pinot Quickstart link to install and start Pinot batch QuickStart locally."),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"bin/quick-start-batch.sh\n")),Object(o.b)("p",null,"Check out Client library Github Repo"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"git clone git@github.com:fx19880617/pinot-client-go.git\ncd pinot-client-go\n")),Object(o.b)("p",null,"Build and run the example application to query from Pinot Batch Quickstart"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-bash"}),"go build ./examples/batch-quickstart\n./batch-quickstart\n")),Object(o.b)("h2",{id:"usage"},"Usage"),Object(o.b)("h3",{id:"create-a-pinot-connection"},"Create a Pinot Connection"),Object(o.b)("p",null,"Pinot client could be initialized through:"),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"Zookeeper Path")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'pinotClient := pinot.NewFromZookeeper([]string{"localhost:2123"}, "", "QuickStartCluster")\n')),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"A list of broker addresses.")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'pinotClient := pinot.NewFromBrokerList([]string{"localhost:8000"})\n')),Object(o.b)("ol",null,Object(o.b)("li",{parentName:"ol"},"ClientConfig")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'pinotClient := pinot.NewWithConfig(&pinot.ClientConfig{\n    ZkConfig: &pinot.ZookeeperConfig{\n        ZookeeperPath:     zkPath,\n        PathPrefix:        strings.Join([]string{zkPathPrefix, pinotCluster}, "/"),\n        SessionTimeoutSec: defaultZkSessionTimeoutSec,\n    },\n    ExtraHTTPHeader: map[string]string{\n        "extra-header":"value",\n    },\n})\n')),Object(o.b)("h2",{id:"query-pinot"},"Query Pinot"),Object(o.b)("p",null,"Please see this ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/fx19880617/pinot-client-go/blob/master/examples/batch-quickstart/main.go"}),"example")," for your reference."),Object(o.b)("p",null,"Code snippet:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'pinotClient, err := pinot.NewFromZookeeper([]string{"localhost:2123"}, "", "QuickStartCluster")\nif err != nil {\n    log.Error(err)\n}\nbrokerResp, err := pinotClient.ExecuteSQL("baseballStats", "select count(*) as cnt, sum(homeRuns) as sum_homeRuns from baseballStats group by teamID limit 10")\nif err != nil {\n    log.Error(err)\n}\nlog.Infof("Query Stats: response time - %d ms, scanned docs - %d, total docs - %d", brokerResp.TimeUsedMs, brokerResp.NumDocsScanned, brokerResp.TotalDocs)\n')),Object(o.b)("p",null,"Response Format"),Object(o.b)("p",null,"Query Response is defined as the struct of following:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'type BrokerResponse struct {\n    AggregationResults          []*AggregationResult `json:"aggregationResults,omitempty"`\n    SelectionResults            *SelectionResults    `json:"SelectionResults,omitempty"`\n    ResultTable                 *ResultTable         `json:"resultTable,omitempty"`\n    Exceptions                  []Exception          `json:"exceptions"`\n    TraceInfo                   map[string]string    `json:"traceInfo,omitempty"`\n    NumServersQueried           int                  `json:"numServersQueried"`\n    NumServersResponded         int                  `json:"numServersResponded"`\n    NumSegmentsQueried          int                  `json:"numSegmentsQueried"`\n    NumSegmentsProcessed        int                  `json:"numSegmentsProcessed"`\n    NumSegmentsMatched          int                  `json:"numSegmentsMatched"`\n    NumConsumingSegmentsQueried int                  `json:"numConsumingSegmentsQueried"`\n    NumDocsScanned              int64                `json:"numDocsScanned"`\n    NumEntriesScannedInFilter   int64                `json:"numEntriesScannedInFilter"`\n    NumEntriesScannedPostFilter int64                `json:"numEntriesScannedPostFilter"`\n    NumGroupsLimitReached       bool                 `json:"numGroupsLimitReached"`\n    TotalDocs                   int64                `json:"totalDocs"`\n    TimeUsedMs                  int                  `json:"timeUsedMs"`\n    MinConsumingFreshnessTimeMs int64                `json:"minConsumingFreshnessTimeMs"`\n}\n')),Object(o.b)("p",null,"Note that ",Object(o.b)("inlineCode",{parentName:"p"},"AggregationResults")," and ",Object(o.b)("inlineCode",{parentName:"p"},"SelectionResults")," are holders for PQL queries."),Object(o.b)("p",null,"Meanwhile ",Object(o.b)("inlineCode",{parentName:"p"},"ResultTable")," is the holder for SQL queries. ",Object(o.b)("inlineCode",{parentName:"p"},"ResultTable")," is defined as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'// ResultTable is a ResultTable\ntype ResultTable struct {\n    DataSchema RespSchema      `json:"dataSchema"`\n    Rows       [][]interface{} `json:"rows"`\n}\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"RespSchema")," is defined as:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'// RespSchema is response schema\ntype RespSchema struct {\n    ColumnDataTypes []string `json:"columnDataTypes"`\n    ColumnNames     []string `json:"columnNames"`\n}\n')),Object(o.b)("p",null,"There are multiple functions defined for ",Object(o.b)("inlineCode",{parentName:"p"},"ResultTable"),", like:"),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),"func (r ResultTable) GetRowCount() int\nfunc (r ResultTable) GetColumnCount() int\nfunc (r ResultTable) GetColumnName(columnIndex int) string\nfunc (r ResultTable) GetColumnDataType(columnIndex int) string\nfunc (r ResultTable) Get(rowIndex int, columnIndex int) interface{}\nfunc (r ResultTable) GetString(rowIndex int, columnIndex int) string\nfunc (r ResultTable) GetInt(rowIndex int, columnIndex int) int\nfunc (r ResultTable) GetLong(rowIndex int, columnIndex int) int64\nfunc (r ResultTable) GetFloat(rowIndex int, columnIndex int) float32\nfunc (r ResultTable) GetDouble(rowIndex int, columnIndex int) float64\n")),Object(o.b)("p",null,"Sample Usage is ",Object(o.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/fx19880617/pinot-client-go/blob/master/examples/batch-quickstart/main.go#L58"}),"here")),Object(o.b)("pre",null,Object(o.b)("code",Object(a.a)({parentName:"pre"},{className:"language-go"}),'// Print Response Schema\nfor c := 0; c < brokerResp.ResultTable.GetColumnCount(); c++ {\n  fmt.Printf("%s(%s)\\t", brokerResp.ResultTable.GetColumnName(c), brokerResp.ResultTable.GetColumnDataType(c))\n}\nfmt.Println()\n\n// Print Row Table\nfor r := 0; r < brokerResp.ResultTable.GetRowCount(); r++ {\n  for c := 0; c < brokerResp.ResultTable.GetColumnCount(); c++ {\n    fmt.Printf("%v\\t", brokerResp.ResultTable.Get(r, c))\n  }\n  fmt.Println()\n}\n')))}b.isMDXComponent=!0},170:function(e,n,t){"use strict";t.d(n,"a",(function(){return i})),t.d(n,"b",(function(){return b}));var a=t(0),r=t.n(a),o=r.a.createContext({}),l=function(e){var n=r.a.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):Object.assign({},n,e)),t},i=function(e){var n=l(e.components);return r.a.createElement(o.Provider,{value:n},e.children)};var s="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},u=Object(a.forwardRef)((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,s=function(e,n){var t={};for(var a in e)Object.prototype.hasOwnProperty.call(e,a)&&-1===n.indexOf(a)&&(t[a]=e[a]);return t}(e,["components","mdxType","originalType","parentName"]),u=l(t),b=a,p=u[i+"."+b]||u[b]||c[b]||o;return t?r.a.createElement(p,Object.assign({},{ref:n},s,{components:t})):r.a.createElement(p,Object.assign({},{ref:n},s))}));function b(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[s]="string"==typeof e?e:a,l[1]=i;for(var b=2;b<o;b++)l[b]=t[b];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},171:function(e,n,t){var a;!function(){"use strict";var t={}.hasOwnProperty;function r(){for(var e=[],n=0;n<arguments.length;n++){var a=arguments[n];if(a){var o=typeof a;if("string"===o||"number"===o)e.push(a);else if(Array.isArray(a)&&a.length){var l=r.apply(null,a);l&&e.push(l)}else if("object"===o)for(var i in a)t.call(a,i)&&a[i]&&e.push(i)}}return e.join(" ")}e.exports?(r.default=r,e.exports=r):void 0===(a=function(){return r}.apply(n,[]))||(e.exports=a)}()},175:function(e,n,t){"use strict";var a=t(0),r=t.n(a),o=t(171),l=t.n(o);t(94);n.a=function({children:e,classNames:n,fill:t,icon:a,type:o}){let i=null;switch(o){case"danger":i="alert-triangle";break;case"success":i="check-circle";break;case"warning":i="alert-triangle";break;default:i="info"}return r.a.createElement("div",{className:l()(n,"alert",`alert--${o}`,{"alert--fill":t,"alert--icon":!1!==a}),role:"alert"},!1!==a&&r.a.createElement("i",{className:l()("feather",`icon-${a||i}`)}),e)}}}]);